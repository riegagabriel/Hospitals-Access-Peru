# -*- coding: utf-8 -*-
"""
Aplicaci√≥n Streamlit: An√°lisis Geoespacial de Hospitales en Per√∫
Grupo 1-2-10

ESTRUCTURA DE 3 TABS REQUERIDA:
1. üóÇÔ∏è Data Description
2. üó∫Ô∏è Static Maps & Department Analysis  
3. üåç Dynamic Maps
"""

import streamlit as st
import pandas as pd
import requests
from io import StringIO
import base64

# ============================================
# CONFIGURACI√ìN DE LA P√ÅGINA
# ============================================
st.set_page_config(
    page_title="Hospitales Per√∫ - An√°lisis Geoespacial",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================
# FUNCIONES DE CARGA DE DATOS
# ============================================
@st.cache_data
def load_hospital_data():
    """Carga y procesa datos de hospitales IPRESS desde GitHub"""
    try:
        url = "https://github.com/luchoravar/Hospitals-Access-Peru/raw/main/code/data/IPRESS.csv"
        r = requests.get(url)
        r.raise_for_status()
        raw_data = r.content
        texto = raw_data.decode("latin1", errors="ignore")
        
        # Crear DataFrame
        df = pd.read_csv(StringIO(texto))
        
        # FILTRADO SEG√öN REQUISITOS:
        # 1. Solo hospitales operativos
        df = df[df["Condici√≥n"] == "EN FUNCIONAMIENTO"]
        
        # 2. Coordenadas v√°lidas (no nulas, no cero)
        df = df.dropna(subset=["NORTE", "ESTE"])
        df = df[(df["NORTE"] != 0) & (df["ESTE"] != 0)]
        
        # 3. Solo hospitales (no otros establecimientos)
        df = df[df["Clasificaci√≥n"].isin([
            "HOSPITALES O CLINICAS DE ATENCION GENERAL",
            "HOSPITALES O CLINICAS DE ATENCION ESPECIALIZADA"
        ])]
        
        # Corregir UBIGEO
        df['UBIGEO'] = df['UBIGEO'].astype(str).str.zfill(6)
        df = df.rename(columns={'NORTE': 'lat', 'ESTE': 'lon'})
        
        return df
        
    except Exception as e:
        st.error(f"Error cargando datos: {e}")
        return pd.DataFrame()

@st.cache_data
def create_department_summary(df):
    """Crea resumen por departamento para Tab 2"""
    hosp_por_dep = df.groupby("Departamento", as_index=False).agg(
        Total_hospitales=("Nombre del establecimiento", "count")
    )
    hosp_por_dep = hosp_por_dep.sort_values(
        by="Total_hospitales",
        ascending=False
    ).reset_index(drop=True)
    
    return hosp_por_dep

# ============================================
# FUNCIONES PARA MAPAS
# ============================================
def load_html_map(map_url):
    """Carga mapa HTML desde GitHub"""
    try:
        response = requests.get(map_url)
        if response.status_code == 200:
            return response.text
        else:
            return None
    except:
        return None

def display_html_map(html_content, height=600):
    """Muestra mapa HTML en Streamlit"""
    if html_content:
        st.components.v1.html(html_content, height=height, scrolling=True)
    else:
        st.warning("El mapa no est√° disponible en este momento")

# URLs de mapas pre-generados (debes tener estos en tu repo)
MAP_URLS = {
    "static_choropleth": "https://raw.githubusercontent.com/luchoravar/Hospitals-Access-Peru/main/choropleth_hospitales_distrito.html",
    "static_zero_hospitals": "https://raw.githubusercontent.com/luchoravar/Hospitals-Access-Peru/main/mapa_sin_hospitales.html", 
    "static_top10": "https://raw.githubusercontent.com/luchoravar/Hospitals-Access-Peru/main/mapa_top10.html",
    "dynamic_national": "https://raw.githubusercontent.com/luchoravar/Hospitals-Access-Peru/main/choropleth_hospitales_distrito.html",
    "dynamic_proximity": "https://raw.githubusercontent.com/luchoravar/Hospitals-Access-Peru/main/task2_proximity_lima_loreto.html"
}

# ============================================
# CARGAR DATOS
# ============================================
with st.spinner('Cargando datos de hospitales... ‚è≥'):
    df = load_hospital_data()
    hosp_por_dep = create_department_summary(df) if not df.empty else None

# ============================================
# SIDEBAR
# ============================================
st.sidebar.title("üè• An√°lisis de Hospitales")
st.sidebar.markdown("---")
st.sidebar.info("""
**Proyecto:** An√°lisis Geoespacial  
**Fuente:** MINSA - IPRESS  
**Grupo:** 1-2-10
""")

# ============================================
# TABS PRINCIPALES - ESTRUCTURA REQUERIDA
# ============================================
tab1, tab2, tab3 = st.tabs([
    "üóÇÔ∏è Data Description", 
    "üó∫Ô∏è Static Maps & Department Analysis", 
    "üåç Dynamic Maps"
])

# ============================================
# TAB 1: DATA DESCRIPTION
# ============================================
with tab1:
    st.header("üóÇÔ∏è Data Description")
    
    if df.empty:
        st.error("No se pudieron cargar los datos")
    else:
        # UNIT OF ANALYSIS
        st.subheader("Unit of Analysis")
        st.write("""
        **Operational public hospitals in Peru** - Establecimientos de salud p√∫blicos 
        que se encuentran en funcionamiento seg√∫n el registro IPRESS del Ministerio de Salud (MINSA).
        """)
        
        # DATA SOURCES
        st.subheader("Data Sources")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("""
            **üìä MINSA ‚Äì IPRESS**
            - Registro nacional de establecimientos de salud
            - Informaci√≥n sobre ubicaci√≥n, capacidad y servicios
            - Estado operativo de cada establecimiento
            """)
        
        with col2:
            st.write("""
            **üìç Population Centers**  
            - Shapefile de centros poblados del Per√∫
            - Ubicaciones geogr√°ficas de localidades
            - Usado para an√°lisis de proximidad
            """)
        
        # FILTERING RULES
        st.subheader("Filtering Rules")
        st.write("""
        Se aplicaron los siguientes filtros para garantizar la calidad de los datos:
        """)
        
        filtering_rules = [
            "‚úÖ **Condici√≥n operativa**: Solo establecimientos marcados como 'EN FUNCIONAMIENTO'",
            "‚úÖ **Coordenadas v√°lidas**: Eliminados registros con coordenadas nulas o (0, 0)",
            "‚úÖ **Tipolog√≠a hospitalaria**: Solo 'HOSPITALES O CLINICAS DE ATENCION GENERAL' y 'HOSPITALES O CLINICAS DE ATENCION ESPECIALIZADA'",
            "‚úÖ **UBIGEO completo**: Todos los c√≥digos UBIGEO estandarizados a 6 d√≠gitos"
        ]
        
        for rule in filtering_rules:
            st.write(rule)
        
        st.markdown("---")
        
        # DATA PREVIEW
        st.subheader("Data Preview")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Hospitales", len(df))
        with col2:
            st.metric("Departamentos", df['Departamento'].nunique())
        with col3:
            st.metric("Registros Filtrados", "100% operativos")
        
        st.write("**Muestra de los datos:**")
        st.dataframe(
            df[[
                'Nombre del establecimiento', 
                'Departamento', 
                'Provincia', 
                'Clasificaci√≥n',
                'UBIGEO'
            ]].head(10),
            use_container_width=True
        )
        
        # DATA QUALITY
        st.subheader("Data Quality Summary")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Completitud de datos:**")
            st.write(f"‚Ä¢ Registros iniciales: 20,819")
            st.write(f"‚Ä¢ Registros finales: {len(df)}")
            st.write(f"‚Ä¢ Tasa de retenci√≥n: {(len(df)/20819*100):.1f}%")
            
        with col2:
            st.write("**Cobertura geogr√°fica:**")
            st.write(f"‚Ä¢ Departamentos cubiertos: {df['Departamento'].nunique()}")
            st.write(f"‚Ä¢ Provincias cubiertas: {df['Provincia'].nunique()}")
            st.write(f"‚Ä¢ Distritos cubiertos: {df['UBIGEO'].nunique()}")

# ============================================
# TAB 2: STATIC MAPS & DEPARTMENT ANALYSIS
# ============================================
with tab2:
    st.header("üó∫Ô∏è Static Maps & Department Analysis")
    
    if df.empty:
        st.error("No hay datos disponibles para generar mapas")
    else:
        # STATIC MAPS SECTION
        st.subheader("Static Maps (GeoPandas)")
        
        # Map 1: Choropleth por distrito
        st.write("**1. Distribuci√≥n de Hospitales por Distrito**")
        html_choropleth = load_html_map(MAP_URLS["static_choropleth"])
        display_html_map(html_choropleth, height=500)
        st.caption("Mapa coropl√©tico que muestra la densidad de hospitales p√∫blicos por distrito en el Per√∫")
        
        st.markdown("---")
        
        # Map 2: Distritos sin hospitales
        st.write("**2. Distritos sin Hospitales P√∫blicos**")
        html_zero = load_html_map(MAP_URLS["static_zero_hospitals"])
        display_html_map(html_zero, height=500)
        st.caption("Distritos que no cuentan con ning√∫n hospital p√∫blico operativo (resaltados en azul)")
        
        st.markdown("---")
        
        # Map 3: Top 10 distritos
        st.write("**3. Top 10 Distritos con M√°s Hospitales**")
        html_top10 = load_html_map(MAP_URLS["static_top10"])
        display_html_map(html_top10, height=500)
        st.caption("Los 10 distritos con mayor concentraci√≥n de hospitales p√∫blicos")
        
        st.markdown("---")
        
        # DEPARTMENT ANALYSIS SECTION
        st.subheader("Department Analysis")
        
        # Summary Table
        st.write("**Tabla Resumen por Departamento**")
        st.dataframe(hosp_por_dep, use_container_width=True, height=400)
        
        # Department Metrics
        col1, col2 = st.columns(2)
        
        with col1:
            if not hosp_por_dep.empty:
                st.metric(
                    "Departamento con m√°s hospitales",
                    f"{hosp_por_dep.iloc[0]['Departamento']}",
                    f"{hosp_por_dep.iloc[0]['Total_hospitales']} hospitales"
                )
        
        with col2:
            if not hosp_por_dep.empty:
                st.metric(
                    "Departamento con menos hospitales", 
                    f"{hosp_por_dep.iloc[-1]['Departamento']}",
                    f"{hosp_por_dep.iloc[-1]['Total_hospitales']} hospitales"
                )
        
        # Bar Chart (simulado con Streamlit)
        st.write("**Gr√°fico de Barras - Hospitales por Departamento**")
        
        # Preparamos datos para el gr√°fico
        chart_data = hosp_por_dep.set_index('Departamento')['Total_hospitales'].head(15)
        st.bar_chart(chart_data)
        
        st.caption("Distribuci√≥n del n√∫mero de hospitales p√∫blicos por departamento (top 15)")

# ============================================
# TAB 3: DYNAMIC MAPS
# ============================================
with tab3:
    st.header("üåç Dynamic Maps")
    
    # NATIONAL CHOROPLETH + MARKERS
    st.subheader("National Choropleth + Markers")
    st.write("""
    **Mapa nacional interactivo** que combina:
    - Capa coropl√©tica por distrito
    - Cl√∫steres de marcadores para hospitales individuales
    - Tooltips con informaci√≥n detallada
    - Control de capas para personalizar la visualizaci√≥n
    """)
    
    html_national = load_html_map(MAP_URLS["dynamic_national"])
    display_html_map(html_national, height=600)
    
    st.markdown("---")
    
    # PROXIMITY MAPS - LIMA & LORETO
    st.subheader("Proximity Analysis: Lima & Loreto")
    st.write("""
    **An√°lisis de proximidad** para las regiones de Lima y Loreto:
    - Radio de an√°lisis: 10 km alrededor de cada centro poblado
    - Identificaci√≥n de centros m√°s aislados y concentrados
    - Visualizaci√≥n de buffers y hospitales dentro del radio
    - Comparaci√≥n entre regi√≥n costera (Lima) y selv√°tica (Loreto)
    """)
    
    # M√©tricas de proximidad
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**üèôÔ∏è Lima**")
        st.write("‚Ä¢ Regi√≥n con mayor densidad hospitalaria")
        st.write("‚Ä¢ Mejor acceso en √°reas urbanas")
        st.write("‚Ä¢ Desaf√≠os en zonas periurbanas")
    
    with col2:
        st.write("**üå≥ Loreto**")
        st.write("‚Ä¢ Regi√≥n con mayor desaf√≠o de acceso")
        st.write("‚Ä¢ Baja densidad hospitalaria")
        st.write("‚Ä¢ Aislamiento en comunidades ribere√±as")
    
    html_proximity = load_html_map(MAP_URLS["dynamic_proximity"])
    display_html_map(html_proximity, height=600)
    
    # Leyenda explicativa
    st.info("""
    **üé® Leyenda del Mapa de Proximidad:**
    - üî¥ **Lima - Aislado**: Centro poblado con menor acceso a hospitales en Lima
    - üü¢ **Lima - Concentrado**: Centro poblado con mayor acceso a hospitales en Lima  
    - üü† **Loreto - Aislado**: Centro poblado con menor acceso a hospitales en Loreto
    - üîµ **Loreto - Concentrado**: Centro poblado con mayor acceso a hospitales en Loreto
    - ‚óè **Puntos**: Hospitales dentro del radio de 10 km
    """)

# ============================================
# FOOTER
# ============================================
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: gray;'>
    <p><b>An√°lisis Geoespacial de Hospitales en Per√∫</b> | Grupo 1-2-10 | MINSA IPRESS</p>
</div>
""", unsafe_allow_html=True)
